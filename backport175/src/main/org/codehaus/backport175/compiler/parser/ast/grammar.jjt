/*******************************************************************************************
 * Copyright (c) Jonas Bonér, Alexandre Vasseur. All rights reserved.                      *
 * http://backport175.codehaus.org                                                         *
 * --------------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of Apache License Version 2.0 *
 * a copy of which has been included with this distribution in the license.txt file.       *
 *******************************************************************************************/

/**
 * JJTree grammar for annotation expressions.
 *
 * @author <a href="mailto:jboner@codehaus.org">Jonas Bonér</a>
 * @author <a href="mailto:alex@gnilux.com">Alexandre Vasseur</a>
 * @author <a href="mailto:the_mindstorm@evolva.ro">Alex Popescu</a>
 */



options {

    MULTI=true;

    VISITOR=true;

    NODE_DEFAULT_VOID=true;

    NODE_PACKAGE="org.codehaus.backport175.compiler.parser.ast";

    NODE_USES_PARSER=false;

    UNICODE_INPUT = true;

}



PARSER_BEGIN(AnnotationParser)

/*******************************************************************************************
 * Copyright (c) Jonas Bonér, Alexandre Vasseur. All rights reserved.                      *
 * http://backport175.codehaus.org                                                         *
 * --------------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of Apache License Version 2.0 *
 * a copy of which has been included with this distribution in the license.txt file.       *
 *******************************************************************************************/

package org.codehaus.backport175.compiler.parser.ast;



import java.lang.reflect.Modifier;

import java.io.Reader;

import java.io.StringReader;



/**

 * The annotation parser.

 *

 * @author <a href="mailto:jboner@codehaus.org">Jonas Bonér</a>

 */

public class AnnotationParser {



    public ASTRoot parse(String annotation) throws ParseException {

        return parse(new StringReader(annotation));

    }



    public ASTRoot parse(Reader reader) throws ParseException {

        ReInit(reader);

        return Root();

    }

}

PARSER_END(AnnotationParser)



//------------------ Global lexical scope ------------------



SKIP : /* WHITE SPACE */

{ " " | "\t" }



TOKEN :

{

 < DOT : "." >

| < INTEGER: <DECIMAL_LITERAL> (["l","L"])? | ("0")+ ["l","L"] >

| < HEXNUMBER: <HEX_LITERAL> (["l","L"])? >

| < OCTNUMBER : <OCTAL_LITERAL> (["l","L"])? >

| < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >

| < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >

| < #OCTAL_LITERAL: "0" (["0"-"7"])* >

|  < FLOAT:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >

| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >

| < BOOLEAN : "true" | "false" | "TRUE" | "FALSE" >

| < STRING :   "\""

      (   (~["\"","\\","\n","\r"])

        | ("\\"

            ( ["n","t","b","r","f","\\","'","\""]

            | ["0"-"7"] ( ["0"-"7"] )?

            | ["0"-"3"] ["0"-"7"] ["0"-"7"]

            )

          )

        | ("\\u"

        	["0"-"9","A"-"F","a"-"f"]

        	["0"-"9","A"-"F","a"-"f"]

        	["0"-"9","A"-"F","a"-"f"]

        	["0"-"9","A"-"F","a"-"f"]

          )

      )*

      "\""

 >

| < CHAR :       "'"

      (   (~["'","\\","\n","\r"])

        | ("\\"

            ( ["n","t","b","r","f","\\","'","\""]

            | ["0"-"7"] ( ["0"-"7"] )?

            | ["0"-"3"] ["0"-"7"] ["0"-"7"]

            )

          )

        | ("\\u"

        	["0"-"9","A"-"F","a"-"f"]

        	["0"-"9","A"-"F","a"-"f"]

        	["0"-"9","A"-"F","a"-"f"]

        	["0"-"9","A"-"F","a"-"f"]

          )

      )

      "'"

 > /* AW-328 */

| < NEWLINE : "\n" >

| < LEFT_PARENTHEZIS : "(" >

| < RIGHT_PARENTHEZIS : ")" >

| < LEFT_BRACKET : "{" >

| < RIGHT_BRACKET : "}" >

| < COMMA : "," >

| < EQUALS : "=" >

| < #AT : "@" >

| < ANNOTATION : <AT> <JAVA_TYPE> >

| < JAVA_NAME: (<JAVA_LETTER>)+ >

| < JAVA_TYPE_MAYBEARRAY: <JAVA_TYPE> (("[]")*".class")? >

| < JAVA_TYPE: <JAVA_NAME> (<DOT> <JAVA_NAME>)* >

| < #JAVA_LETTER: ["a"-"z", "A"-"Z", "_", "$", "+", "#", "0"-"9"] >

}





/**

 * Entry point.

 */

ASTRoot Root() #Root : {}

{

    Annotation() (<EOF> | "\r\n" | "\n")

    { return jjtThis; }

}



/**

 * Annotation.

 */

void Annotation() #Annotation : { }

{

    LOOKAHEAD(3)

    <ANNOTATION> <LEFT_PARENTHEZIS> (LOOKAHEAD(4) KeyValuePairList() | Value()) <RIGHT_PARENTHEZIS>

    |

    LOOKAHEAD(2)

    <ANNOTATION> <LEFT_PARENTHEZIS> <RIGHT_PARENTHEZIS>

    |

    <ANNOTATION>



}



/**

 * KeyValuePairList.

 */

void KeyValuePairList() : { }

{

    KeyValuePair()

    (<COMMA> KeyValuePair() )*

}



/**

 * KeyValuePair.

 */

void KeyValuePair() #KeyValuePair :

{

    Token key, value;

}

{

    key=<JAVA_NAME>

    {

        jjtThis.setKey(key.image);

    }

    <EQUALS>

    Value()

}



/**

 * Value.

 *

 */

void Value() : {}

{

    Annotation()

    | Char()

    | String()

    | Array()

    | Identifier()

    | Boolean()

    | Integer()

    | Float()

    | Hex()

    | Oct()

}

/**

 * Identifier.

 */

void Identifier() #Identifier :

{

    Token value;

}

{

    value=<JAVA_TYPE_MAYBEARRAY>

    {

        jjtThis.setValue(value.image);

    }

}



/**

 * Boolean.

 */

void Boolean() #Boolean :

{

    Token value;

}

{

    value=<BOOLEAN>

    {

        jjtThis.setValue(value.image);

    }

}



/**

 * Char.

 */

void Char() #Char :

{

    Token value;

}

{

    value=<CHAR>

    {

        jjtThis.setValue(value.image);

    }

}



/**

 * String.

 */

void String() #String :

{

    Token value;

}

{

    value=<STRING>

    {

        jjtThis.setValue(value.image);

    }

}



/**

 * Array.

 */

void Array() #Array : {}

{

    <LEFT_BRACKET> [Value() (LOOKAHEAD(2) <COMMA> Value())* ] <RIGHT_BRACKET>

}



/**

 * Integer.

 */

void Integer() #Integer :

{

    Token value;

}

{

    value=<INTEGER>

    {

        jjtThis.setValue(value.image);

    }

}



/**

 * Float.

 */

void Float() #Float :

{

    Token value;

}

{

    value=<FLOAT>

    {

        jjtThis.setValue(value.image);

    }

}



/**

 * Hex.

 */

void Hex() #Hex :

{

    Token value;

}

{

    value=<HEXNUMBER>

    {

        jjtThis.setValue(value.image);

    }

}



/**

 * Oct.

 */

void Oct() #Oct :

{

    Token value;

}

{

    value=<OCTNUMBER>

    {

        jjtThis.setValue(value.image);

    }

}

