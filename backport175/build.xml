<?xml version="1.0"?>
<!-- ========================================================================================= -->
<!--  Copyright (c) Jonas Boner, Alexandre Vasseur. All rights reserved.                       -->
<!--  http://backport175.codehaus.org                                                          -->
<!--  =======================================================================================  -->
<!--  The software in this package is published under the terms of Apache License Version 2.0  -->
<!--  a copy of which has been included with this distribution in the license.txt file.        -->
<!--  =======================================================================================  -->

<!-- ============================================================== -->
<!-- Ant build file for the backport175 project -->
<!-- ============================================================== -->

<project name="backport175" default="cleandist" basedir=".">

    <!--    define the backport175 classpath used to compile the project -->
    <!--    we exclude jarjar and alike, used only for build purpose -->
    <path id="project.class.path">
        <fileset dir="${basedir}/lib">
            <exclude name="jarjar*"/>
            <include name="*.jar"/>
        </fileset>
        <!-- external classpath -->
        <pathelement path="${java.class.path}"/>
    </path>
    <!--    define the jarjar task we use to remap ASM -->
    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpath="${basedir}/lib/jarjar-0.3.jar"/>
    <target name="cleandist" depends="clean, dist"/>
    <!-- =================================================== -->
    <!--  initializes parameters  -->
    <!-- =================================================== -->
    <target name="init">
        <property name="name" value="backport175"/>
        <property name="version" value="1.0-beta1"/>
        <property name="basedir" value="."/>
        <property name="src.dir" value="${basedir}/src"/>
        <property name="test.src.dir" value="${basedir}/src/test"/>
        <property name="build.dir" value="${basedir}/target"/>
        <property name="lib.dir" value="${basedir}/lib"/>
        <property name="config.dir" value="${basedir}/config"/>
        <property name="javac.debug" value="on"/>
        <property name="javac.deprecation" value="on"/>
        <property name="javac.optimize" value="off"/>
        <property name="javac.depend" value="off"/>
        <property name="javac.verbose" value="off"/>
        <!-- os specific -->
        <condition property="pathseparator" value=";">
            <os family="dos"/>
        </condition>
        <condition property="pathseparator" value=":">
            <not>
                <os family="dos"/>
            </not>
        </condition>
        <property name="lib.dir" value="${basedir}/lib"/>
        <property name="main.classes" value="${build.dir}/classes"/>
        <property name="test.classes" value="${build.dir}/test-classes"/>
        <property name="samples.classes" value="${build.dir}/samples-classes"/>
        <property environment="env"/>
    </target>
    <!-- ============================================================== -->
    <!-- clean -->
    <!-- ============================================================== -->
    <target name="clean" depends="init">
        <delete dir="${main.classes}"/>
        <delete dir="${test.classes}"/>
        <delete dir="${samples.classes}"/>
        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${main.classes}"/>
        <mkdir dir="${test.classes}"/>
        <mkdir dir="${samples.classes}"/>
    </target>
    <!-- ============================================================== -->
    <!-- compiles the distribution  -->
    <!-- ============================================================== -->
    <target name="compile" depends="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${main.classes}"/>
        <javac destdir="${main.classes}" debug="on" source="1.3" target="1.3">
            <src path="${src.dir}/main"/>
            <classpath>
                <path refid="project.class.path"/>
            </classpath>
        </javac>
    </target>
    <!-- ============================================================== -->
    <!-- compiles the tests -->
    <!-- ============================================================== -->
    <target name="compile:test" depends="init, compile">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${test.classes}"/>
        <javac destdir="${test.classes}" debug="on">
            <src path="${test.src.dir}"/>
            <classpath>
                <pathelement path="${main.classes}"/>
                <path refid="project.class.path"/>
            </classpath>
        </javac>
        <!-- remap ASM since it is used directly in the tests for some -->
        <jarjar destfile="${test.classes}.jar">
            <fileset dir="${test.classes}" includes="**/*"/>
            <rule pattern="org.objectweb.asm.**" result="org.codehaus.${name}.@0"/>
        </jarjar>
        <unjar src="${test.classes}.jar" dest="${test.classes}" overwrite="true"/>
    </target>
    <!-- ============================================================== -->
    <!-- compiles all -->
    <!-- ============================================================== -->
    <target name="compile:all" depends="init">
        <antcall target="compile"/>
        <antcall target="compile:test"/>
    </target>
    <!-- ============================================================== -->
    <!-- create distribution -->
    <!-- ============================================================== -->
    <target name="dist" depends="compile, compile:test">
        <!-- we embed jarjar version of ASM and QDox to remove all dependencies  -->
        <jarjar destfile="${build.dir}/${name}-${version}.jar">
            <fileset dir="${main.classes}"/>
            <zipfileset src="${basedir}/lib/asm-2.0.RC1.jar"/>
            <zipfileset src="${basedir}/lib/qdox-1.4.jar" excludes="**/*.txt"/>
            <rule pattern="org.objectweb.asm.**" result="org.codehaus.${name}.@0"/>
            <rule pattern="com.thoughtworks.qdox.**" result="org.codehaus.${name}.@0"/>
        </jarjar>
        <copy tofile="${lib.dir}/${name}-${version}.jar" file="${build.dir}/${name}-${version}.jar" overwrite="true"/>
    </target>
    <!-- ============================================================== -->
    <!-- jjtree and javacc compilation -->
    <!-- ============================================================== -->
    <target name="jjtree" depends="init">
        <jjtree target="${src.dir}/main/org/codehaus/${name}/expression/ast/grammar.jjt" outputdirectory="${src.dir}/main/org/codehaus/${name}/expression/ast" javacchome="${env.JAVACC_HOME}"/>
        <javacc target="${src.dir}/main/org/codehaus/${name}/expression/ast/grammar.jj" outputdirectory="${src.dir}/main/org/codehaus/${name}/expression/ast" javacchome="${env.JAVACC_HOME}"/>
    </target>
    <!-- =================================================== -->
    <!--  compiles annotations for the tests -->
    <!-- =================================================== -->
    <target name="test:annotationc">
        <java fork="true" classname="org.codehaus.${name}.compiler.AnnotationC">
            <classpath>
                <path refid="project.class.path"/>
                <pathelement path="${test.classes}"/>
            </classpath>
            <arg line="-verbose -src ${basedir}/src/test -classes ${basedir}/target/test-classes -config ${basedir}/src/test/annotation.properties"/>
        </java>
    </target>
    <!-- =================================================== -->
    <!--  all tests -->
    <!-- =================================================== -->
    <target name="test" depends="clean, dist, test:annotationc">
        <java fork="true" classname="test.AllTests">
            <classpath>
                <path refid="project.class.path"/>
                <pathelement path="${test.classes}"/>
            </classpath>
        </java>
    </target>
    <!-- =================================================== -->
    <!--  Example on how to use the annotationc ant task -->
    <!-- =================================================== -->
    <target name="samples:task:annotationc" depends="init, compile:all">
        <taskdef name="annotationc"
            classname="org.codehaus.${name}.AnnotationCTask"
            classpathref="project.class.path"/>
        <annotationc
            verbose="true"
            destdir="${basedir}/target/samples-classes"
            properties="${basedir}/src/samples/annotation.properties"
            copytodest="**/*.RESIDUALPROPS">
            <properties path="${basedir}/src/samples/annotation.properties"/>
            <src path="${basedir}/src/samples"/>
            <!--            <src path="${basedir}/src/test"/>-->
            <classpath path="${basedir}/target/samples-classes"/>
            <!--            <classpath path="${basedir}/target/test-classes"/>-->
            <!--            <classpath path="${basedir}/target/classes"/>-->
            <fileset dir=".">
                <include name="**/BAZ.java"/>
            </fileset>
        </annotationc>
    </target>
</project>